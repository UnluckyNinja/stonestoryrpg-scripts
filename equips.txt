var settings = import MyScripts/settings

func isFarmExp()
  return settings.farm_mode = "exp"

func isFarmKi()
  return settings.farm_mode = "ki"

func aac()
  ?item.left.state = 3
    equipL *0 wand
    equipL @item.left@
  ?item.right.state = 3
    ?time % 2
      equipR throw
    :
      equipR *0 shield
    equip @item.right@

aac()

/**
 * Ability activation
 **/

func isUsingSkill()
  return (item.right = bardiche & item.right.state = 2)
    ^| (item.right = heavy_hammer & item.right.state = 2)
    ^| (item.right = blade & item.right.state = 2)

func canBlaed()
  return item.GetCount("blade") > 0 & item.GetCooldown("blade") <= 0

func canBardiche()
  return item.GetCooldown("bardiche") <= 0

func canHeavyHammer()
  return item.GetCooldown("heavy_hammer") <= 0

func activateBlade()
  equip blade
  activate R

func activateBardiche()
  equip bardiche
  activate R

func activateHeavyHammer()
  equip heavy_hammer
  activate R

func tryAblities()
  ?isUsingSkill()
    return false
  ?foe.distance > 9
    return false
  ?foe.armor > 0
    ?canHeavyHammer()
      activateHeavyHammer()
      return true
    ?canBardiche()
      activateBardiche()
      return true
  :
    ?foe.GetCount(11) >=3 & item.GetCooldown("blade") <=0
      equip blade
      activate R
      return true
    ?canBardiche()
      activateBardiche()
      return true
  return false

/**
 * Conditional logics
 **/

func equipFarm()
  equipL xp_stone
  equipR xi_stone

func staffDash()
  ?item.GetCooldown("quarterstaff") <= 0 & item.CanActivate()
    equip quarterstaff
    activate R
    return true
  return false

func equipDash()
  ?foe.distance > 9
    equipR dashing shield
    ?item.GetCooldown("bash") <= 0
      equipR bashing shield

func equipWalk()
  ?foe.distance >= 23
    ?hp < maxhp 
      equipL ouroboros
      equipR compound shield
    :
      ?staffDash()
        return
      equipL triskelion
      equipR compound shield

func equipSpeed()
  ?isUsingSkill()
    return
  ?foe.distance > 9
    equipR dashing shield
    ?item.GetCooldown("bash") <= 0
      equipR bashing shield
  :
    ?foe.armor > 0
      equipBestHammer("R")
    :?foe.GetCount(7) > 2
      equipBestElement("R", long sword D)
    :
      equipBestElement("R", "sword -long D")
  ?hp < maxhp
    equipL vigor sword dL
  :
    equipBestElement("L", "sword -long d")


func equipGeneral()
  ?isUsingSkill()
    return
  ?isFarmExp()
    equipR xp_stone
  :?isFarmKi()
    equipR xi_stone // seems a typo from dev
  :
    equipR compound shield
  ?foe.distance <= 7
    equipMelee("L")
  :
    equipRanged("L")

func equipMelee(dir)
  ?isUsingSkill()
    return
  ?foe.distance > 6
    ?item.GetCooldown("bash") <= 0 & item.CanActivate()
      equipR dashing shield
    :
      equipR bashing shield
    equipL vigor sword dL
    return
  ?foe ! immune_to_physical & tryAblities()
    return
  ?foe = immune_to_physical
    equipBestStaff()
  :?foe = magic_vulnerability
    equipBestStaff()
  :?foe.GetCount(7) >= 2
    equipBestLongSword(dir)
  :?foe.armor > 0
    equipBestHammer(dir)
  :
    equipBestSword(dir)

func equipRanged(dir)
  var can_crossbow = true
  var can_element = true
  ?foe = immune_to_ranged
    equipMelee(dir)
    return
  ?foe = immune_to_physical
    can_crossbow = false
  ?foe = magic_resist
    can_element = false
  // ?foe = magic_vulnerability
  ?foe.count >= 2
    ?can_crossbow
      ?hp < maxhp
        equip socketed crossbow vigor dL
      :?can_element
        ?item.GetCount(socketed crossbow aether dU) > 0
          equip socketed crossbow aether dU
        :
          equipBestSocketedCrossbow()
      :
        equip stone socketed crossbow
    :
      equipBestWand(dir)
  :
    ?can_crossbow
      ?hp < maxhp
        equip socketed crossbow vigor dL
      :?can_element
        equipBestSocketedCrossbow()
      :
        equip stone socketed crossbow
    :
      equipBestWand(dir)

func equipDebuff()
  ?foe.debuffs.string ! debuff_damage & foe ! immune_to_debuff_damage & (foe.state = 32 | foe.state = 142)
    equipBy("R", poison sword dP)
    ?foe.armor > 0
      equipBy("R", poison hammer dP)
  :?foe.debuffs.string ! debuff_dot
    equipBy("R", fire sword dF)
    ?foe.armor > 0
      equipBy("R", fire hammer dF)
  :
    equipBy("R", ice sword dI)
    ?foe.armor > 0
      equipBy("R", ice hammer dI)

func equipDebuffCrossbow()
  ?foe.debuffs.string ! debuff_damage & foe ! immune_to_debuff_damage
    equipBy("D", poison socket crossbow dP)
  :?foe.debuffs.string ! debuff_dot
    equipBy("D", fire socket crossbow dF)
  :
    equipBy("D", socket crossbow ice dI)

func equipLeech()
  ?foe.armor > 0
    ?hp < maxhp
      equipBy("L", vigor hammer dL)
    :
      equipBestElement("L", hammer D)
  :
    ?hp < maxhp
      equipBy("L", vigor sword dL)
    :
      ?foe = stone
        equipBy("L", vigor sword dL)
      :
        equipBestElement("L", sword D)

/**
 * Weapons
 **/

func equipBestSword(dir)
  equipBy(dir, "sword -long")
  equipBestElement(dir, "sword -long")

func equipBestLongSword(dir)
  equipBy(dir, socketed long sword)
  equipBestElement(dir, socketed long sword)

func equipBestHammer(dir)
  equipBy(dir, hammer)
  equipBestElement(dir, hammer)

func equipBestCrossbow(dir) // or directly use equip
  equipBy(dir, crossbow)

func equipBestSocketedCrossbow()
  equip socketed crossbow
  ?foe = ice
    ?foe.debuffs.GetCount("dot") > 0
      equipBestElement("D", socketed crossbow D)
    :
      equipBestElement("D", socketed crossbow d)
  :
    equipBestElement("D", socketed crossbow)

func equipBestStaff()
  equip socketed staff
  equipBestElement("D", socketed staff)

func equipBestWand(dir)
  equipBy(dir, wand)
  equipBestElement(dir, wand)

func equipBestShield()
  equipR shield
  equipR compound shield
  equipBestElement(dir, shield)
  // ?hp < maxhp
  //   equipR vigor shield dh

func equipBestElement(dir, keywords)
  equipBy(dir, ice + " " + keywords)
  equipBy(dir, fire + " " + keywords)
  equipBy(dir, poison + " " + keywords)
  equipBy(dir, aether + " " + keywords)
  equipBy(dir, vigor + " " + keywords)
  ?foe = poison
    equipBy(dir, ice + " " + keywords)
  :?foe = ice
    equipBy(dir, fire + " " + keywords)
  :?foe = fire
    equipBy(dir, aether + " " + keywords)
  :?foe = aether
    equipBy(dir, vigor + " " + keywords)
  :?foe = vigor
    equipBy(dir, poison + " " + keywords)

func equipBy(dir, keywords)
  ?dir = "L"
    equipL @keywords@
  :?dir = "R"
    equipR @keywords@
  :
    equip @keywords@

